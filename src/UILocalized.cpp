#include "UILocalized.hpp"
#include <imgui.h>
#include <map>
#include <cassert>
#include <string>
using namespace std;

void UILocalized::add_localized_font(float m_font_size) {
    auto& fonts = ImGui::GetIO().Fonts;
    fonts->Clear();
    fonts->AddFontFromFileTTF("c:\\Windows\\Fonts\\msyh.ttc",m_font_size, nullptr, fonts->GetGlyphRangesChineseFull());
    fonts->Build();
    UILocalized::init_loc();
}

static map<std::string, const char*> loc;

void UILocalized::init_loc() {
    loc["Transparency"] = (const char*)u8"透明度";
    loc["vrzwk"] = _S("汉化：vrzwk汉化组(vrzwk.com)");
    loc["Makes the UI transparent when not focused."] = _S("UI界面无焦点时透明。");
    loc["Input Passthrough"] = _S("输入直通");
    loc["Allows mouse and keyboard inputs to register to the game while the UI is focused."] = _S("当UI界面获取焦点时，允许鼠标和键盘输入到游戏。");
    loc["Show Advanced Options"] = _S("显示高级选项");
    loc["Show additional options for greater control over various settings."] = _S("显示其他选项以更好地进行各种设置。");
    loc["Reset to Default Settings"] = _S("恢复默认设置");
    loc["Keyboard Menu Key: Insert"] = _S("键盘菜单键：插入");
    loc["Gamepad L3 + R3: Toggle Menu"] = _S("手柄 L3+R3：切换菜单");
    loc["Gamepad RT: Shortcuts"] = _S("手柄 RT：快捷键");
    loc["Gamepad LB/RB: Change Sidebar Page"] = _S("手柄 LB/RB：更改边栏页面");
    loc["About"] = _S("关于");
    loc["Not bound"] = _S("未绑定");
    loc["Press any key..."] = _S("按下任意键...");
    loc["FrameworkConfig"] = _S("框架配置");
    loc["Main"] = _S("主页");
    loc["GUI/Themes"] = _S("视图/主题");
    loc["Menu Key"] = _S("菜单键");
    loc["Show Cursor Key"] = _S("显示光标键");
    loc["Remember Menu Open/Closed State"] = _S("记住菜单打开/关闭状态");
    loc["Enable L3 + R3 Toggle"] = _S("启用 L3 + R3 切换");
    loc["Always Show Cursor"] = _S("光标一直显示");
    loc["Select GUI Theme"] = _S("选择界面主题");
    loc["Font Size"] = _S("字体大小");
    loc["Attempt Unload Plugins"] = _S("尝试卸载插件");
    loc["Reload Plugins"] = _S("重新加载插件");
    loc["Loaded plugins:"] = _S("已加载插件:");
    loc["No plugins loaded."] = _S("未加载任何插件。");
    loc["Errors:"] = _S("错误:");
    loc["Warnings:"] = _S("警告:");
    loc["Author: praydog"] = _S("作者：praydog");
    loc["Licenses"] = _S("授权");
    loc["Runtime"] = _S("运行时");
    loc["Unreal"] = _S("虚幻引擎");
    loc["Input"] = _S("输入");
    loc["Camera"] = _S("相机");
    loc["Keybinds"] = _S("按键绑定");
    loc["WARNING: Hardware-accelerated GPU scheduling is enabled. This may cause the game to run slower."] = _S("警告：启用了硬件加速GPU调度。这可能会导致游戏运行速度变慢。");
    loc["Go into your Windows Graphics settings and disable \"Hardware-accelerated GPU scheduling\""] = _S("进入您的Windows图形设置并禁用“硬件加速GPU调度”");
    loc["Note: This is only necessary if you are experiencing performance issues."] = _S("注意：只有在遇到性能问题时才需要执行此操作。");
    loc["Unknown page selected"] = _S("选择了未知页面");
    loc["Runtime Information ("] = _S("运行时信息 (");
    loc["Desktop Spectator View"] = _S("桌面观众视图");
    loc["2D Screen Mode"] = _S("2D屏幕模式");
    loc["Render Resolution (per-eye): %d x %d"] = _S("渲染分辨率（单眼）: %d x %d");
    loc["Total Render Resolution: %d x %d"] = _S("总渲染分辨率: %d x %d");
    loc["Overlay Options"] = _S("覆盖选项");
    loc["Overlay Type"] = _S("覆盖类型");
    loc["UI Cylinder Angle"] = _S("UI柱面角度");
    loc["UI Offset"] = _S("UI偏移");
    loc["UI Distance"] = _S("UI距离");
    loc["UI Size"] = _S("UI大小");
    loc["UI Follows View"] = _S("UI跟随视图");
    loc["Framework Distance"] = _S("框架距离");
    loc["Framework Size"] = _S("框架大小");
    loc["Framework Follows View"] = _S("框架跟随视图");
    loc["Framework Wrist UI"] = _S("框架手腕UI");
    loc["Framework Mouse Emulation"] = _S("框架鼠标模拟");
    loc["Resolution can be changed in SteamVR"] = _S("可在SteamVR中更改分辨率");
    loc["Rendering Method"] = _S("渲染模式");
    loc["Synced Sequential Method"] = _S("同步顺序模式");
    loc["World Scale"] = _S("世界比例");
    loc["Depth Scale"] = _S("深度比例");
    loc["Disable HZBOcclusion"] = _S("禁用HZBOctication");
    loc["Disable Instance Culling"] = _S("禁用实例裁减");
    loc["Disable HDR Composition"] = _S("禁用HDR合成");
    loc["Disable Blur Widgets"] = _S("禁用模糊工具");
    loc["Continue holding down L3 + R3 to toggle aim method"] = _S("继续按住 L3+R3 切换瞄准方法");
    loc["AimMethod Notification"] = _S("瞄准方法通知");
    loc["RT Modifier Controls"] = _S("RT 修改器控件");
    loc["RT + Left Stick: Camera left/right/forward/back"] = _S("RT + 左摇杆：相机 左/右/前进/后退");
    loc["RT + Right Stick: Camera up/down"] = _S("RT + 右摇杆：相机 上/下");
    loc["Page: %d"] = _S("页: %d");
    loc["DPad Left: Previous page | DPad Right: Next page"] = _S("左DPad：上一页 | 右DPad：下一页");
    loc["RT + B: Save Camera 2"] = _S("RT + B：保存相机2");
    loc["RT + Y: Save Camera 1"] = _S("RT + Y：保存相机1");
    loc["RT + X: Save Camera 0"] = _S("RT + X：保存相机0");
    loc["RT + B: Load Camera 2"] = _S("RT + B：加载相机2");
    loc["RT + Y: Load Camera 1"] = _S("RT + Y：加载相机1");
    loc["RT + X: Load Camera 0"] = _S("RT + X：加载相机0");
    loc["RT + B: Reset camera offset"] = _S("RT + B：重置相机偏移");
    loc["RT + Y: Recenter view"] = _S("RT + Y：重置中心视图");
    loc["RT + X: Reset standing origin"] = _S("RT + X：重置站立原点");
    loc["Uncap Framerate"] = _S("取消帧率上限");
    loc["Enable GUI"] = _S("开启视图");
    loc["Enable Depth"] = _S("开启深度");
    loc["Load Blueprint Code"] = _S("加载蓝图代码");
    loc["Ghosting Fix"] = _S("修复鬼影");
    loc["Near Clip Plane"] = _S("近裁剪面");
    loc["Enable"] = _S("开启");
    loc["Value"] = _S("值");
    loc["Controller"] = _S("控制器");
    loc["VR Joystick Deadzone"] = _S("VR 摇杆死区");
    loc["DPad Shifting"] = _S("DPad 移位");
    loc["DPad Shifting Method"] = _S("DPad 移位方法");
    loc["Aim Method"] = _S("瞄准方法");
    loc["Experimental, may crash"] = _S("实验性的，可能会崩溃");
    loc["Some games may not work with this enabled."] = _S("启用此功能后，某些游戏可能无法运行。");
    loc["Type"] = _S("类型");
    loc["Speed"] = _S("速度");
    loc["Smoothing"] = _S("平滑");
    loc["Modify Player Control Rotation"] = _S("修改玩家转向控制");
    loc["Use Pawn Control Rotation"] = _S("使用Pawn控制旋转");
    loc["Multiplayer Support"] = _S("多人游戏支持");
    loc["Snap Turn"] = _S("急转");
    loc["Enabled"] = _S("已启用");
    loc["Set Snap Turn Rotation Angle in Degrees."] = _S("以度为单位设置捕捉旋转旋转角度。");
    loc["Angle"] = _S("角度");
    loc["Set Snap Turn Joystick Deadzone."] = _S("设置快速转动摇杆死区。");
    loc["Deadzone"] = _S("死区");
    loc["Movement Orientation"] = _S("运动方向");
    loc["Roomscale Movement"] = _S("室内运动");
    loc["Camera"] = _S("相机");
    loc["Save Camera 0"] = _S("保存相机0");
    loc["Save Camera 1"] = _S("保存相机1");
    loc["Save Camera 2"] = _S("保存相机2");
    loc["Load Camera 0"] = _S("加载相机0");
    loc["Load Camera 1"] = _S("加载相机1");
    loc["Load Camera 2"] = _S("加载相机2");
    loc["Decoupled Pitch"] = _S("场地解耦");
    loc["Auto Adjust UI"] = _S("自动调整UI");
    loc["Playspace Keys"] = _S("游戏空间按键");
    loc["Recenter View Key"] = _S("重新居中视图键");
    loc["Set Standing Origin Key"] = _S("重置视图键");
    loc["Camera Keys"] = _S("相机按键");
    loc["Load Camera 0 Key"] = _S("加载相机0按键");
    loc["Load Camera 1 Key"] = _S("加载相机1按键");
    loc["Load Camera 2 Key"] = _S("加载相机2按键");
    loc["Overlay/Runtime Keys"] = _S("叠加/运行时按键");
    loc["Toggle 2D Screen Mode Key"] = _S("切换2D屏幕模式键");
    loc["Disable VR Key"] = _S("禁用VR键");
    loc["Compatibility Options"] = _S("兼容性选项");
    loc["Skip UObjectArray Init"] = _S("跳过UObjectArray初始化");
    loc["Skip PostInitProperties"] = _S("跳过PostInitProperties");
    loc["SceneView Compatibility Mode"] = _S("场景视图兼容模式");
    loc["Extreme Compatibility Mode"] = _S("极端兼容模式");
    loc["Splitscreen Compatibility"] = _S("分屏兼容性");
    loc["Index"] = _S("序号");
    loc["Sync Mode"] = _S("同步模式");
    loc["Early\0Late\0Very Late\0"] = _S("早\0晚\0非常晚\0");
    loc["Right Bounds"] = _S("右侧边界");
    loc["Left Bounds"] = _S("左侧边界");
    loc["Disable Projection Matrix Override"] = _S("禁用投影矩阵覆盖");
    loc["Disable View Matrix Override"] = _S("禁用视图矩阵覆盖");
    loc["Disable Backbuffer Size Override"] = _S("禁用备份缓冲区大小覆盖");
    loc["Disable VR Overlay"] = _S("禁用VR覆盖");
    loc["Disable VR Entirely"] = _S("完全禁用VR");
    loc["Stereo Emulation Mode"] = _S("立体声仿真模式");
    loc["Wait for Present"] = _S("等待呈现");
    loc["Controllers allowed"] = _S("允许的控制器");
    loc["Controller test mode"] = _S("控制器测试模式");
    loc["Prediction Scale"] = _S("预测标尺");
    loc["Raw Left"] = _S("左");
    loc["Raw Right"] = _S("右");
    loc["Left Stick"] = _S("左摇杆");
    loc["Right Stick"] = _S("右摇杆");
    loc["Hardware scheduling: %s"] = _S("硬件调度: %s");
    loc["Disabled"] = _S("已禁用");
    loc["Loading..."] = _S("加载中...");
    loc["%s not loaded: %s not found"] = _S("%s未被加载: 未找到%s");
    loc["Please select %s from the loader if you want to use %s"] = _S("请从加载器中选择%s，如果你想使用%s的话");
    loc["%s not loaded: %s"] = _S("%s未被加载: %s");
    loc["%s not loaded: Unknown error"] = _S("%s未被加载: 未知错误");
    loc["No runtime loaded."] = _S("未加载任何运行时。");
    loc["Attempt to reinitialize"] = _S("尝试重新初始化");
    loc["Set Standing Height"] = _S("设置站立高度");
    loc["Set Standing Origin"] = _S("设置站立原点");
    loc["Recenter View"] = _S("重新居中视图");
    loc["Reinitialize Runtime"] = _S("重新初始化运行时");
}

const char* UILocalized::get_localized_text(const char* text) {
    if (loc.find(text) != loc.end()) {
        return loc[text];
    } 
    return text;
}
